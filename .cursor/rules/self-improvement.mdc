---
description: 
globs: 
alwaysApply: true
---
---
description: Human-AI collaboration workflow for improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

# Cursor Rules Self-Improvement Workflow

## Reality Check: AI Limitations

**What I CAN do:**
- Analyze code patterns when you ask me to review them
- Identify inconsistencies when working on specific files
- Suggest rule improvements during coding sessions
- Update rules when you point out gaps or issues

**What I CANNOT do:**
- Automatically monitor your codebase for patterns
- Persistently track changes across sessions
- Proactively update rules without being asked
- Remember previous sessions or conversations

## User-Triggered Improvement Workflow

### üîÑ **Periodic Rule Review** (Recommended: Monthly)
Ask the AI to review rules by saying:
```
"Can you review our cursor rules and suggest improvements based on recent code patterns?"
```

### üö® **Session-Based Triggers** (Ask these during/after coding sessions)

**After Major Features:**
```
"Should we update any cursor rules based on what we just built?"
```

**When Encountering Repetitive Code:**
```
"I keep writing similar code - should we add a cursor rule for this pattern?"
```

**After Bug Fixes:**
```
"Can this bug be prevented with a cursor rule?"
```

**When Adding New Dependencies:**
```
"Should we create cursor rules for [new library/tool]?"
```

### üìã **Quick Rule Health Check** (Ask me to run this)
```
"Please check if our cursor rules need updates by reviewing:
- New components added since last rule update
- New dependencies in package.json
- Repeated patterns in recent code changes
- Any outdated examples or references"
```

## Rule Improvement Triggers

### **Add New Rules When:**
- A new technology/pattern is used in 3+ files
- You've encountered the same bug/issue multiple times
- You find yourself explaining the same pattern repeatedly
- New security or performance patterns emerge
- Major architectural changes introduce new conventions

### **Modify Existing Rules When:**
- Better examples exist in the current codebase
- Dependencies are updated with breaking changes
- You discover the rule doesn't match current practice
- New edge cases are found
- Related rules have been updated

## Pattern Recognition Examples

**Example: Repeated Modal Patterns**
```typescript
// If you notice writing similar modal code multiple times:
<Modal visible={isVisible} onRequestClose={onClose}>
  <ScrollView 
    keyboardShouldPersistTaps="handled"
    nestedScrollEnabled={true}
    style={{ maxHeight: '90%' }}
  >
    {/* content */}
  </ScrollView>
</Modal>

// Ask: "Should we create a cursor rule for modal best practices?"
```

**Example: API Call Patterns**
```typescript
// If you see repeated patterns like:
try {
  const response = await fetch('/api/endpoint');
  if (!response.ok) throw new Error('API failed');
  return await response.json();
} catch (error) {
  console.error('API error:', error);
  return fallbackData;
}

// Ask: "Should we add a cursor rule for API error handling patterns?"
```

## Rule Quality Standards

**Good Rules Are:**
- ‚úÖ Actionable and specific
- ‚úÖ Include real examples from your codebase
- ‚úÖ Have clear do/don't examples
- ‚úÖ Address common pain points

**Poor Rules Are:**
- ‚ùå Too vague or general
- ‚ùå Use hypothetical examples
- ‚ùå Don't explain why the pattern matters
- ‚ùå Rarely referenced during development

## Rule Maintenance Workflow

### **When to Deprecate Rules:**
Ask me to review rules if:
- You haven't used a pattern in 6+ months
- Dependencies have major breaking changes
- Better alternatives exist
- The rule conflicts with new best practices

### **Documentation Updates:**
Trigger rule updates when:
- Adding new major dependencies
- Refactoring core components
- Changing architectural patterns
- Discovering better implementation approaches

### **Rule Cross-References:**
Ask me to check:
- Do related rules contradict each other?
- Are examples still current with latest code?
- Do rule links still work?
- Are there gaps between related rules?

## Implementation Reminders

**For Users:**
1. Set monthly calendar reminder: "Review cursor rules with AI"
2. Ask for rule updates after major features
3. Note repetitive patterns during development
4. Request rule reviews when onboarding new team members

**For AI:**
1. Suggest rule improvements when identifying patterns
2. Reference existing rules when giving advice
3. Propose new rules when explaining complex patterns
4. Update examples to match current codebase patterns

Follow [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) for proper rule formatting and structure.


