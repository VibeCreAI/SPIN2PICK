import Constants from 'expo-constants';

/**
 * Get the appropriate API base URL based on platform
 * @returns The base URL for API calls
 */
const getApiBaseUrl = (): string => {
  // üîí Secure API configuration - uses deployed Vercel API
  // API keys stay secure on the server side
  const configuredUrl = Constants.expoConfig?.extra?.apiBaseUrl;
  
  if (configuredUrl) {
    console.log('üì° Using configured API URL:', configuredUrl);
    return configuredUrl;
  }
  
  // Fallback to deployed API (no API keys exposed)
  const fallbackUrl = 'https://spin2pick-app.vercel.app';
  console.log('üì° Using fallback API URL:', fallbackUrl);
  return fallbackUrl;
};

/**
 * Get an appropriate emoji for an activity using AI
 * @param activityName The name of the activity
 * @returns A promise that resolves to an emoji string
 */
export const getEmojiForActivity = async (activityName: string): Promise<string> => {
  try {
    const baseUrl = getApiBaseUrl();
    const response = await fetch(`${baseUrl}/api/get-emoji`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ activityName })
    });

    if (!response.ok) {
      console.error('API error:', await response.text());
      return getRandomFallbackEmoji(); // Random fallback emoji
    }

    const data = await response.json();
    const emojiText = data.choices[0]?.message?.content?.trim() || getRandomFallbackEmoji();
    
    // Extract just the emoji if there's any additional text
    const emojiRegex = /(\p{Emoji})/u;
    const match = emojiText.match(emojiRegex);
    return match ? match[0] : getRandomFallbackEmoji();
    
  } catch (error) {
    console.error('Error getting emoji:', error);
    return getRandomFallbackEmoji(); // Random fallback emoji
  }
};

/**
 * Cache for storing already generated emojis to avoid redundant API calls
 */
const emojiCache: Record<string, string> = {
  // Preset mappings for common activities
  'Sing Songs': 'üé§',
  'Craft Corner': 'üé®',
  'Jump Trampoline': 'ü§∏',
  'Plant Seeds': 'üå±',
  'Hide and Seek': 'üôà',
  'Dance Party': 'üíÉ',
  'Puzzle Time': 'üß©',
  'Read a Book': 'üìö',
};

/**
 * Diverse fallback emojis for when AI emoji generation fails
 */
const FALLBACK_EMOJIS = [
  // Fun & Games
  'üéØ', 'üé≤', 'üé™', 'üé®', 'üé≠', 'üéÆ', 'üé≥', 'üé∏', 'üé∫', 'üéª',
  // Sports & Activities  
  '‚öΩ', 'üèÄ', 'üèà', 'üéæ', 'üèê', 'üèì', 'üè∏', 'ü•è', 'üèπ', 'üé£',
  // Creative & Arts
  '‚úèÔ∏è', 'üñçÔ∏è', 'üñåÔ∏è', 'üìù', 'üìö', 'üìñ', 'üéº', 'üéµ', 'üé∂', 'üé§',
  // Science & Discovery
  'üî¨', 'üß™', 'üî≠', 'üß≤', '‚öóÔ∏è', 'üå°Ô∏è', 'üí°', 'üîç', 'üóùÔ∏è', '‚ö°',
  // Nature & Outdoor
  'üå±', 'üå∏', 'üå∫', 'üåª', 'üå≥', 'üçÉ', 'ü¶ã', 'üêõ', 'üêù', 'üåà',
  // Food & Cooking
  'üç™', 'üßÅ', 'üç∞', 'ü•ß', 'üçï', 'ü•™', 'üçé', 'üçå', 'ü•ï', 'ü•í',
  // Adventure & Exploration
  'üó∫Ô∏è', 'üß≠', '‚õ∞Ô∏è', 'üèïÔ∏è', 'üéí', 'üî¶', 'ü™ì', 'üè¥‚Äç‚ò†Ô∏è', 'üíé', 'üèÜ',
  // Magic & Fantasy
  '‚ú®', 'üåü', '‚≠ê', 'üîÆ', 'üé©', 'ü™Ñ', 'üßö', 'ü¶Ñ', 'üêâ', 'üëë',
  // Tools & Building
  'üî®', 'üîß', '‚öôÔ∏è', 'üß∞', 'üìê', 'üìè', '‚úÇÔ∏è', 'üìé', 'üîó', 'üß©'
];

/**
 * Get a random fallback emoji when AI emoji generation fails
 */
const getRandomFallbackEmoji = (): string => {
  const randomIndex = Math.floor(Math.random() * FALLBACK_EMOJIS.length);
  return FALLBACK_EMOJIS[randomIndex];
};

/**
 * Get an emoji for an activity, using cache when possible
 * @param activityName The name of the activity
 * @returns A promise that resolves to an emoji string
 */
export const getEmoji = async (activityName: string): Promise<string> => {
  // Check if we already have this emoji cached
  if (emojiCache[activityName]) {
    return emojiCache[activityName];
  }
  
  try {
    const emoji = await getEmojiForActivity(activityName);
    // Save to cache for future use
    emojiCache[activityName] = emoji;
    return emoji;
  } catch (error) {
    console.error('Error in getEmoji:', error);
    return getRandomFallbackEmoji(); // Random fallback emoji
  }
};

/**
 * Get an AI-suggested activity based on existing activities
 * @param existingActivities Array of existing activity names
 * @param declinedSuggestions Array of previously declined suggestion names
 * @returns A promise that resolves to a suggested activity name
 */
export const getAISuggestedActivity = async (existingActivities: string[], declinedSuggestions: string[] = []): Promise<string> => {
  console.log('üöÄ Starting AI suggestion request...');
  console.log('üìù Existing activities:', existingActivities);
  console.log('üö´ Declined suggestions:', declinedSuggestions);
  
  try {
    const baseUrl = getApiBaseUrl();
    console.log('üåê API Base URL:', baseUrl);
    
    const requestBody = { existingActivities, declinedSuggestions };
    console.log('üì¶ Request body:', JSON.stringify(requestBody, null, 2));
    
    console.log('üì° Making fetch request...');
    const response = await fetch(`${baseUrl}/api/suggest-activity`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    console.log('üìà Response status:', response.status);
    console.log('üìà Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå API Response Error:');
      console.error('   Status:', response.status, response.statusText);
      console.error('   Error body:', errorText);
      console.log('üîÑ Falling back to random activity');
      return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
    }

    console.log('‚úÖ Response OK, parsing JSON...');
    const data = await response.json();
    console.log('üìã Full API Response Structure:');
    console.log(JSON.stringify(data, null, 2));
    
    // Check if response has expected structure
    if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
      console.error('‚ùå Invalid response structure - no choices array');
      console.log('üîÑ Falling back to random activity');
      return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
    }
    
    const choice = data.choices[0];
    console.log('üéØ First choice object:', JSON.stringify(choice, null, 2));
    
    if (!choice.message || !choice.message.content) {
      console.error('‚ùå Invalid choice structure - no message.content');
      console.log('üîÑ Falling back to random activity');
      return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
    }
    
    let rawResponse = choice.message.content;
    console.log('ü§ñ Raw AI response (type: ' + typeof rawResponse + '):', JSON.stringify(rawResponse));
    console.log('ü§ñ Raw AI response (length: ' + rawResponse.length + '):', rawResponse);
    
    // More comprehensive cleaning
    let suggestedActivity = rawResponse
      .trim()
      .replace(/^["'`]|["'`]$/g, '') // Remove quotes and backticks
      .replace(/^\.|\.$/g, '') // Remove leading/trailing periods
      .replace(/^-\s*/, '') // Remove leading dashes
      .replace(/^\d+\.\s*/, '') // Remove numbered list format
      .split('\n')[0] // Take only first line
      .split('.')[0] // Take only first sentence
      .split(',')[0] // Take only first part before comma
      .trim();

    console.log('üßπ After cleaning steps:');
    console.log('   - Remove quotes/backticks');
    console.log('   - Remove periods');
    console.log('   - Remove dashes');
    console.log('   - Remove numbered format');
    console.log('   - Split by newline (first part)');
    console.log('   - Split by period (first sentence)');
    console.log('   - Split by comma (first part)');
    console.log('   - Final trim');
    console.log('üßπ Cleaned response:', JSON.stringify(suggestedActivity));
    console.log('üßπ Cleaned length:', suggestedActivity.length);

    // Very permissive validation - only reject truly invalid responses
    if (/^[\s]*$/.test(suggestedActivity) || /[^\w\s&'.,!-]/.test(suggestedActivity)) {
      console.log('‚ùå VALIDATION FAILED: Contains invalid characters or is empty');
      console.log('   String breakdown:');
      for (let i = 0; i < suggestedActivity.length; i++) {
        const char = suggestedActivity[i];
        const code = char.charCodeAt(0);
        console.log(`   [${i}]: "${char}" (code: ${code})`);
      }
      console.log('üîÑ Falling back to random activity');
      return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
    }
    console.log('‚úÖ Basic validation passed');

    if (existingActivities.includes(suggestedActivity)) {
      console.log('‚ùå VALIDATION FAILED: Duplicate activity suggested');
      console.log('   Suggested:', JSON.stringify(suggestedActivity));
      console.log('   Existing:', existingActivities);
      console.log('üîÑ Falling back to random activity');
      return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
    }
    console.log('‚úÖ Not a duplicate from existing activities');

    if (declinedSuggestions.includes(suggestedActivity)) {
      console.log('‚ùå VALIDATION FAILED: Previously declined activity suggested');
      console.log('   Suggested:', JSON.stringify(suggestedActivity));
      console.log('   Declined:', declinedSuggestions);
      console.log('üîÑ Falling back to random activity');
      return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
    }
    console.log('‚úÖ Not a previously declined suggestion');

    console.log('üéâ ALL VALIDATIONS PASSED!');
    console.log('‚úÖ Accepting AI suggestion:', JSON.stringify(suggestedActivity));
    return suggestedActivity;
    
  } catch (error: unknown) {
    console.error('üí• Exception in getAISuggestedActivity:');
    console.error('   Error type:', error?.constructor?.name || 'Unknown');
    console.error('   Error message:', error instanceof Error ? error.message : String(error));
    console.error('   Full error:', error);
    console.log('üîÑ Falling back to random activity');
    return getRandomFallbackActivity([...existingActivities, ...declinedSuggestions]);
  }
};

/**
 * Enhanced fallback activity suggestions with matching emojis - organized by category for diversity
 */
const FALLBACK_ACTIVITY_PAIRS = [
  // Creative & Arts
  { name: 'Draw Pictures', emoji: 'üé®' },
  { name: 'Paint Rocks', emoji: 'üñåÔ∏è' },
  { name: 'Make Origami', emoji: 'üìÑ' },
  { name: 'Build Blocks', emoji: 'üß±' },
  { name: 'Make Jewelry', emoji: 'üíé' },
  { name: 'Do Crafts', emoji: '‚úÇÔ∏è' },
  { name: 'Make Puppets', emoji: 'üß∏' },
  { name: 'Clay Sculpting', emoji: 'üè∫' },
  { name: 'Finger Painting', emoji: 'üñêÔ∏è' },
  { name: 'Make Collages', emoji: 'üì∏' },
  
  // Science & Discovery  
  { name: 'Make Slime', emoji: 'üß™' },
  { name: 'Do Science', emoji: 'üî¨' },
  { name: 'Grow Crystals', emoji: 'üíé' },
  { name: 'Mix Colors', emoji: 'üåà' },
  { name: 'Make Volcanoes', emoji: 'üåã' },
  { name: 'Bug Hunting', emoji: 'üêõ' },
  { name: 'Cloud Watching', emoji: '‚òÅÔ∏è' },
  { name: 'Magnet Play', emoji: 'üß≤' },
  { name: 'Shadow Puppets', emoji: 'üë•' },
  { name: 'Water Experiments', emoji: 'üíß' },
  
  // Physical & Active
  { name: 'Play Soccer', emoji: '‚öΩ' },
  { name: 'Do Yoga', emoji: 'üßò' },
  { name: 'Play Tag', emoji: 'üèÉ' },
  { name: 'Ride Bikes', emoji: 'üö¥' },
  { name: 'Skip Rope', emoji: 'ü™¢' },
  { name: 'Do Gymnastics', emoji: 'ü§∏' },
  { name: 'Play Basketball', emoji: 'üèÄ' },
  { name: 'Hopscotch', emoji: 'ü¶ò' },
  { name: 'Obstacle Course', emoji: 'üèÅ' },
  { name: 'Balloon Games', emoji: 'üéà' },
  
  // Imaginative & Role Play
  { name: 'Tell Stories', emoji: 'üìö' },
  { name: 'Do Magic', emoji: 'üé©' },
  { name: 'Build Fort', emoji: 'üè∞' },
  { name: 'Treasure Hunt', emoji: 'üó∫Ô∏è' },
  { name: 'Dress Up', emoji: 'üëó' },
  { name: 'Puppet Show', emoji: 'üé≠' },
  { name: 'Space Adventure', emoji: 'üöÄ' },
  { name: 'Pirate Quest', emoji: 'üè¥‚Äç‚ò†Ô∏è' },
  { name: 'Superhero Training', emoji: 'ü¶∏' },
  { name: 'Tea Party', emoji: 'ü´ñ' },
  
  // Music & Performance
  { name: 'Play Music', emoji: 'üéµ' },
  { name: 'Sing Karaoke', emoji: 'üé§' },
  { name: 'Play Drums', emoji: 'ü•Å' },
  { name: 'Sing Songs', emoji: 'üé∂' },
  { name: 'Dance Battle', emoji: 'üíÉ' },
  { name: 'Make Instruments', emoji: 'üé∏' },
  { name: 'Rhythm Games', emoji: 'üéº' },
  { name: 'Opera Singing', emoji: 'üé≠' },
  { name: 'Beat Boxing', emoji: 'üéµ' },
  { name: 'Air Guitar', emoji: 'üé∏' },
  
  // Outdoor & Nature
  { name: 'Fly Kites', emoji: 'ü™Å' },
  { name: 'Water Plants', emoji: 'üå±' },
  { name: 'Build Sandcastles', emoji: 'üè∞' },
  { name: 'Go Fishing', emoji: 'üé£' },
  { name: 'Feed Birds', emoji: 'üê¶' },
  { name: 'Collect Leaves', emoji: 'üçÉ' },
  { name: 'Go Camping', emoji: 'üèïÔ∏è' },
  { name: 'Nature Walk', emoji: 'üå≥' },
  { name: 'Rock Collecting', emoji: 'ü™®' },
  { name: 'Flower Pressing', emoji: 'üå∏' },
  
  // Games & Puzzles
  { name: 'Play Chess', emoji: '‚ôüÔ∏è' },
  { name: 'Play Cards', emoji: 'üÉè' },
  { name: 'Board Games', emoji: 'üé≤' },
  { name: 'Memory Games', emoji: 'üß†' },
  { name: 'Riddle Time', emoji: 'ü§î' },
  { name: 'Word Games', emoji: 'üìù' },
  { name: 'Number Puzzles', emoji: 'üî¢' },
  { name: 'Brain Teasers', emoji: 'üß©' },
  { name: 'Trivia Quiz', emoji: '‚ùì' },
  { name: 'Charades', emoji: 'üé≠' },
  
  // Cooking & Food
  { name: 'Bake Cookies', emoji: 'üç™' },
  { name: 'Make Smoothies', emoji: 'ü•§' },
  { name: 'Fruit Kabobs', emoji: 'üçì' },
  { name: 'Pizza Making', emoji: 'üçï' },
  { name: 'Cookie Decorating', emoji: 'üßÅ' },
  { name: 'Sandwich Art', emoji: 'ü•™' },
  { name: 'Ice Cream Sundae', emoji: 'üç®' },
  { name: 'Veggie Faces', emoji: 'ü•ï' },
  { name: 'Trail Mix', emoji: 'ü•ú' },
  { name: 'Pancake Art', emoji: 'ü•û' },
  
  // Unique & Quirky
  { name: 'Blow Bubbles', emoji: 'ü´ß' },
  { name: 'Play Catch', emoji: '‚öæ' },
  { name: 'Write Letters', emoji: '‚úâÔ∏è' },
  { name: 'Sock Puppet', emoji: 'üß¶' },
  { name: 'Backwards Day', emoji: 'üîÑ' },
  { name: 'Silly Walks', emoji: 'üö∂' },
  { name: 'Robot Dance', emoji: 'ü§ñ' },
  { name: 'Animal Sounds', emoji: 'üêÑ' },
  { name: 'Tongue Twisters', emoji: 'üëÖ' },
  { name: 'Joke Telling', emoji: 'üòÇ' }
];

// Extract just the activity names for backward compatibility
const FALLBACK_ACTIVITIES = FALLBACK_ACTIVITY_PAIRS.map(pair => pair.name);

/**
 * Get a random fallback activity that doesn't exist in current activities
 */
const getRandomFallbackActivity = (existingActivities: string[]): string => {
  const availableActivities = FALLBACK_ACTIVITIES.filter(
    activity => !existingActivities.includes(activity)
  );
  
  if (availableActivities.length === 0) {
    // If all fallbacks are used, generate a simple numbered activity
    let counter = 1;
    let newActivity = `Fun Activity ${counter}`;
    while (existingActivities.includes(newActivity)) {
      counter++;
      newActivity = `Fun Activity ${counter}`;
    }
    return newActivity;
  }
  
  const randomIndex = Math.floor(Math.random() * availableActivities.length);
  return availableActivities[randomIndex];
};

/**
 * Get a random fallback activity with its matching emoji
 */
export const getRandomFallbackActivityPair = (existingActivities: string[]): { name: string; emoji: string } => {
  const availablePairs = FALLBACK_ACTIVITY_PAIRS.filter(
    pair => !existingActivities.includes(pair.name)
  );
  
  if (availablePairs.length === 0) {
    // If all fallbacks are used, generate a simple numbered activity
    let counter = 1;
    let newActivity = `Fun Activity ${counter}`;
    while (existingActivities.includes(newActivity)) {
      counter++;
      newActivity = `Fun Activity ${counter}`;
    }
    return { name: newActivity, emoji: getRandomFallbackEmoji() };
  }
  
  const randomIndex = Math.floor(Math.random() * availablePairs.length);
  return availablePairs[randomIndex];
};

/**
 * Generate random default activities for first-time app installation
 */
export const generateRandomDefaultActivities = (count: number = 8): Array<{ name: string; emoji: string }> => {
  // Shuffle the activity pairs array
  const shuffled = [...FALLBACK_ACTIVITY_PAIRS].sort(() => Math.random() - 0.5);
  
  // Take the first 'count' activities
  return shuffled.slice(0, count);
}; 