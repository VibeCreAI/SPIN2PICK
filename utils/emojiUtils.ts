import Constants from 'expo-constants';
import { PREDETERMINED_TITLES } from '../data/predeterminedTitles';
import { TitleCategory } from './titleUtils';

/**
 * Get the appropriate API base URL based on platform
 * @returns The base URL for API calls
 */
const getApiBaseUrl = (): string => {
  // üîí Secure API configuration - uses deployed Vercel API
  // API keys stay secure on the server side
  const configuredUrl = Constants.expoConfig?.extra?.apiBaseUrl;
  
  if (configuredUrl) {
    return configuredUrl;
  }
  
  // Fallback to deployed API (no API keys exposed)
  return 'https://spin2pick-app.vercel.app';
};

/**
 * Get an appropriate emoji for an activity using AI
 * @param activityName The name of the activity
 * @returns A promise that resolves to an emoji string
 */
export const getEmojiForActivity = async (activityName: string): Promise<string> => {
  try {
    const baseUrl = getApiBaseUrl();
    const response = await fetch(`${baseUrl}/api/get-emoji`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ activityName })
    });

    if (!response.ok) {
      console.error('API error:', await response.text());
      return getRandomFallbackEmoji(); // Random fallback emoji
    }

    const data = await response.json();
    const emojiText = data.choices[0]?.message?.content?.trim() || getRandomFallbackEmoji();
    
    // Extract just the emoji if there's any additional text
    const emojiRegex = /(\p{Emoji})/u;
    const match = emojiText.match(emojiRegex);
    return match ? match[0] : getRandomFallbackEmoji();
    
  } catch (error) {
    console.error('Error getting emoji:', error);
    return getRandomFallbackEmoji(); // Random fallback emoji
  }
};

/**
 * Cache for storing already generated emojis to avoid redundant API calls
 */
const emojiCache: Record<string, string> = {
  // Preset mappings for common activities
  'Sing Songs': 'üé§',
  'Craft Corner': 'üé®',
  'Jump Trampoline': 'ü§∏',
  'Plant Seeds': 'üå±',
  'Hide and Seek': 'üôà',
  'Dance Party': 'üíÉ',
  'Puzzle Time': 'üß©',
  'Read a Book': 'üìö',
};

/**
 * Diverse fallback emojis for when AI emoji generation fails
 */
const FALLBACK_EMOJIS = [
  // Fun & Games
  'üéØ', 'üé≤', 'üé™', 'üé®', 'üé≠', 'üéÆ', 'üé≥', 'üé∏', 'üé∫', 'üéª',
  // Sports & Activities  
  '‚öΩ', 'üèÄ', 'üèà', 'üéæ', 'üèê', 'üèì', 'üè∏', 'ü•è', 'üèπ', 'üé£',
  // Creative & Arts
  '‚úèÔ∏è', 'üñçÔ∏è', 'üñåÔ∏è', 'üìù', 'üìö', 'üìñ', 'üéº', 'üéµ', 'üé∂', 'üé§',
  // Science & Discovery
  'üî¨', 'üß™', 'üî≠', 'üß≤', '‚öóÔ∏è', 'üå°Ô∏è', 'üí°', 'üîç', 'üóùÔ∏è', '‚ö°',
  // Nature & Outdoor
  'üå±', 'üå∏', 'üå∫', 'üåª', 'üå≥', 'üçÉ', 'ü¶ã', 'üêõ', 'üêù', 'üåà',
  // Food & Cooking
  'üç™', 'üßÅ', 'üç∞', 'ü•ß', 'üçï', 'ü•™', 'üçé', 'üçå', 'ü•ï', 'ü•í',
  // Adventure & Exploration
  'üó∫Ô∏è', 'üß≠', '‚õ∞Ô∏è', 'üèïÔ∏è', 'üéí', 'üî¶', 'ü™ì', 'üè¥‚Äç‚ò†Ô∏è', 'üíé', 'üèÜ',
  // Magic & Fantasy
  '‚ú®', 'üåü', '‚≠ê', 'üîÆ', 'üé©', 'ü™Ñ', 'üßö', 'ü¶Ñ', 'üêâ', 'üëë',
  // Tools & Building
  'üî®', 'üîß', '‚öôÔ∏è', 'üß∞', 'üìê', 'üìè', '‚úÇÔ∏è', 'üìé', 'üîó', 'üß©'
];

/**
 * Get a random fallback emoji when AI emoji generation fails
 */
const getRandomFallbackEmoji = (): string => {
  const randomIndex = Math.floor(Math.random() * FALLBACK_EMOJIS.length);
  return FALLBACK_EMOJIS[randomIndex];
};

/**
 * Get an emoji for an activity, using cache when possible
 * @param activityName The name of the activity
 * @returns A promise that resolves to an emoji string
 */
export const getEmoji = async (activityName: string): Promise<string> => {
  // Check if we already have this emoji cached
  if (emojiCache[activityName]) {
    return emojiCache[activityName];
  }
  
  try {
    const emoji = await getEmojiForActivity(activityName);
    // Save to cache for future use
    emojiCache[activityName] = emoji;
    return emoji;
  } catch (error) {
    console.error('Error in getEmoji:', error);
    return getRandomFallbackEmoji(); // Random fallback emoji
  }
};

/**
 * Get an AI-suggested activity based on existing activities
 * @param existingActivities Array of existing activity names
 * @param declinedSuggestions Array of previously declined suggestion names
 * @returns A promise that resolves to a suggested activity name
 */
export const getAISuggestedActivity = async (
  existingActivities: string[], 
  declinedSuggestions: string[] = [],
  titleName: string = 'Kids Activity',
  titleCategory: string = 'family',
  titleDescription: string = 'Random activities',
  titleId?: string
): Promise<string> => {
  const maxRetries = 4; // Allow up to 5 total attempts (initial + 4 retries) for better AI success rate
  let retryDeclinedSuggestions = [...declinedSuggestions]; // Copy to avoid mutating original
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      const baseUrl = getApiBaseUrl();
      const requestBody = { 
        existingActivities, 
        declinedSuggestions: retryDeclinedSuggestions,
        titleName,
        titleCategory,
        titleDescription,
        isRetry: attempt > 0 // Flag for potential server-side improvements
      };
      
      const response = await fetch(`${baseUrl}/api/suggest-activity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå AI API Error (attempt ${attempt + 1}/${maxRetries + 1}):`, response.status, response.statusText, errorText);
        if (attempt === maxRetries) {
          return getRandomFallbackActivity([...existingActivities, ...retryDeclinedSuggestions]);
        }
        continue;
      }

      const data = await response.json();
      
      // Check if response has expected structure
      if (!data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
        console.error(`‚ùå Invalid AI response structure - no choices array (attempt ${attempt + 1}/${maxRetries + 1})`);
        if (attempt === maxRetries) {
          return getRandomFallbackActivity([...existingActivities, ...retryDeclinedSuggestions]);
        }
        continue;
      }
      
      const choice = data.choices[0];
      if (!choice.message || !choice.message.content) {
        console.error(`‚ùå Invalid AI choice structure - no message.content (attempt ${attempt + 1}/${maxRetries + 1})`);
        if (attempt === maxRetries) {
          return getRandomFallbackActivity([...existingActivities, ...retryDeclinedSuggestions]);
        }
        continue;
      }
      
      let rawResponse = choice.message.content;
      
      // Enhanced cleaning pipeline
      let suggestedActivity = rawResponse
        .trim()
        .split('\n')[0]                    // First line only
        .replace(/^["'`]|["'`]$/g, '')     // Remove quotes and backticks
        .replace(/^\d+[.)]\s*/, '')        // Remove numbering (1. 1) )
        .replace(/^[-*‚Ä¢]\s*/, '')          // Remove bullets
        .replace(/^(Option|Suggestion):\s*/i, '') // Remove prefixes
        .split(/[.!?]/)[0]                 // First sentence only
        .split(',')[0]                     // First part before comma
        .trim();

      // Enhanced meta-response detection - content-based rather than character-based
      const isMetaResponse = (text: string) => {
        const lower = text.toLowerCase().trim();
        
        // Analytical phrases that indicate meta-responses
        const analyticalPhrases = [
          'based on', 'analysis', 'suggest', 'recommend',
          'consider', 'would be', 'you could', 'here are',
          'i think', 'perhaps', 'maybe', 'could be',
          'for example', 'such as', 'like:', 'including',
          'depending on', 'according to', 'in conclusion',
          'to summarize', 'overall', 'in general'
        ];

        // Check for analytical phrases
        if (analyticalPhrases.some(phrase => lower.includes(phrase))) {
          return true;
        }

        // Check for response-like patterns
        if ((lower.startsWith('the ') && lower.includes('option')) ||
            lower.includes('response') ||
            lower.includes('answer') ||
            lower.includes('result') ||
            lower.startsWith('here') ||
            lower.startsWith('these') ||
            lower.startsWith('some')) {
          return true;
        }

        return false;
      };

      // Relaxed validation - focus on format rather than character restrictions
      const isValidOption = (text: string) => {
        // Length check
        if (text.length < 2 || text.length > 80) return false;

        // Reject if it's clearly analytical text
        if (isMetaResponse(text)) return false;

        // Allow almost all characters except control characters
        if (/[\x00-\x1F\x7F]/.test(text)) return false;

        // Must contain at least one letter or number
        if (!/[a-zA-Z0-9]/.test(text)) return false;

        // Reject if it's just punctuation or whitespace
        if (/^[\s\W]*$/.test(text)) return false;

        return true;
      };

      if (!isValidOption(suggestedActivity)) {
        console.error(`‚ùå AI suggestion validation failed: "${suggestedActivity}" (attempt ${attempt + 1}/${maxRetries + 1})`);
        if (attempt === maxRetries) {
          // Use smart fallback system
          const fallback = getSmartFallbackOption([...existingActivities, ...retryDeclinedSuggestions], retryDeclinedSuggestions, titleName, titleId);
          if (fallback.source === 'tryagain') {
            throw new Error('AI suggestion failed after maximum attempts. Please try again later.');
          }
          return fallback.name;
        }
        continue;
      }

      if (existingActivities.includes(suggestedActivity)) {
        console.error(`‚ùå AI suggested duplicate activity: "${suggestedActivity}" (attempt ${attempt + 1}/${maxRetries + 1})`);
        if (attempt === maxRetries) {
          const fallback = getSmartFallbackOption([...existingActivities, ...retryDeclinedSuggestions], retryDeclinedSuggestions, titleName, titleId);
          if (fallback.source === 'tryagain') {
            throw new Error('AI suggestion failed after maximum attempts. Please try again later.');
          }
          return fallback.name;
        }
        // Add duplicate to declined list for next retry
        retryDeclinedSuggestions.push(suggestedActivity);
        continue;
      }

      if (retryDeclinedSuggestions.includes(suggestedActivity)) {
        console.error(`‚ùå AI suggested previously declined activity: "${suggestedActivity}" (attempt ${attempt + 1}/${maxRetries + 1})`);
        if (attempt === maxRetries) {
          const fallback = getSmartFallbackOption([...existingActivities, ...retryDeclinedSuggestions], retryDeclinedSuggestions, titleName, titleId);
          if (fallback.source === 'tryagain') {
            throw new Error('AI suggestion failed after maximum attempts. Please try again later.');
          }
          return fallback.name;
        }
        continue;
      }
      
      // Success! Return the valid suggestion
      if (attempt > 0) {
        console.log(`‚úÖ AI suggestion successful on retry attempt ${attempt + 1}: "${suggestedActivity}"`);
      }
      return suggestedActivity;
      
    } catch (error: unknown) {
      console.error(`‚ùå AI suggestion failed (attempt ${attempt + 1}/${maxRetries + 1}):`, error instanceof Error ? error.message : String(error));
      if (attempt === maxRetries) {
        const fallback = getSmartFallbackOption([...existingActivities, ...retryDeclinedSuggestions], retryDeclinedSuggestions, titleName, titleId);
        if (fallback.source === 'tryagain') {
          throw new Error('AI suggestion failed after maximum attempts. Please try again later.');
        }
        return fallback.name;
      }
    }
  }
  
  // This should never be reached, but just in case
  const fallback = getSmartFallbackOption([...existingActivities, ...retryDeclinedSuggestions], retryDeclinedSuggestions, titleName, titleId);
  if (fallback.source === 'tryagain') {
    throw new Error('AI suggestion failed after maximum attempts. Please try again later.');
  }
  return fallback.name;
};

/**
 * üÜï NEW TERMINOLOGY - Wrapper for getAISuggestedActivity using "option" terminology
 * Get an AI-suggested option based on existing options
 * @param existingOptions Array of existing option names
 * @param declinedSuggestions Array of previously declined suggestion names
 * @param titleName Name of the wheel (e.g., "Kids Options")
 * @param titleCategory Category of the wheel (e.g., "family", "food", "games")
 * @param titleDescription Description of the wheel
 * @returns A promise that resolves to a suggested option name
 */
export const getAISuggestedOption = async (
  existingOptions: string[], 
  declinedSuggestions: string[] = [],
  titleName: string = 'Kids Options',
  titleCategory: string = 'family',
  titleDescription: string = 'Random options',
  titleId?: string
): Promise<string> => {
  // Call the existing function - maintains full compatibility
  return getAISuggestedActivity(existingOptions, declinedSuggestions, titleName, titleCategory, titleDescription, titleId);
};

/**
 * üÜï NEW TERMINOLOGY - Wrapper for getRandomFallbackActivityPair using "option" terminology
 * Get a random fallback option with its matching emoji
 * @param existingOptions Array of existing option names
 * @returns An object with name and emoji properties
 */
export const getRandomFallbackOptionPair = (existingOptions: string[]): { name: string; emoji: string } => {
  // Call the existing function - maintains full compatibility
  return getRandomFallbackActivityPair(existingOptions);
};

/**
 * üÜï NEW TERMINOLOGY - Wrapper for getEmojiForActivity using "option" terminology
 * Get an appropriate emoji for an option using AI
 * @param optionName The name of the option
 * @returns A promise that resolves to an emoji string
 */
export const getEmojiForOption = async (optionName: string): Promise<string> => {
  // Call the existing function - maintains full compatibility
  return getEmojiForActivity(optionName);
};

/**
 * Enhanced fallback activity suggestions with matching emojis - organized by category for diversity
 */
export const FALLBACK_ACTIVITY_PAIRS = [
  // Creative & Arts
  { name: 'Draw Pictures', emoji: 'üé®' },
  { name: 'Paint Rocks', emoji: 'üñåÔ∏è' },
  { name: 'Make Origami', emoji: 'üìÑ' },
  { name: 'Build Blocks', emoji: 'üß±' },
  { name: 'Make Jewelry', emoji: 'üíé' },
  { name: 'Do Crafts', emoji: '‚úÇÔ∏è' },
  { name: 'Make Puppets', emoji: 'üß∏' },
  { name: 'Clay Sculpting', emoji: 'üè∫' },
  { name: 'Finger Painting', emoji: 'üñêÔ∏è' },
  { name: 'Make Collages', emoji: 'üì∏' },
  
  // Science & Discovery  
  { name: 'Make Slime', emoji: 'üß™' },
  { name: 'Do Science', emoji: 'üî¨' },
  { name: 'Grow Crystals', emoji: 'üíé' },
  { name: 'Mix Colors', emoji: 'üåà' },
  { name: 'Make Volcanoes', emoji: 'üåã' },
  { name: 'Bug Hunting', emoji: 'üêõ' },
  { name: 'Cloud Watching', emoji: '‚òÅÔ∏è' },
  { name: 'Magnet Play', emoji: 'üß≤' },
  { name: 'Shadow Puppets', emoji: 'üë•' },
  { name: 'Water Experiments', emoji: 'üíß' },
  
  // Physical & Active
  { name: 'Play Soccer', emoji: '‚öΩ' },
  { name: 'Do Yoga', emoji: 'üßò' },
  { name: 'Play Tag', emoji: 'üèÉ' },
  { name: 'Ride Bikes', emoji: 'üö¥' },
  { name: 'Skip Rope', emoji: 'ü™¢' },
  { name: 'Do Gymnastics', emoji: 'ü§∏' },
  { name: 'Play Basketball', emoji: 'üèÄ' },
  { name: 'Hopscotch', emoji: 'ü¶ò' },
  { name: 'Obstacle Course', emoji: 'üèÅ' },
  { name: 'Balloon Games', emoji: 'üéà' },
  
  // Imaginative & Role Play
  { name: 'Tell Stories', emoji: 'üìö' },
  { name: 'Do Magic', emoji: 'üé©' },
  { name: 'Build Fort', emoji: 'üè∞' },
  { name: 'Treasure Hunt', emoji: 'üó∫Ô∏è' },
  { name: 'Dress Up', emoji: 'üëó' },
  { name: 'Puppet Show', emoji: 'üé≠' },
  { name: 'Space Adventure', emoji: 'üöÄ' },
  { name: 'Pirate Quest', emoji: 'üè¥‚Äç‚ò†Ô∏è' },
  { name: 'Superhero Training', emoji: 'ü¶∏' },
  { name: 'Tea Party', emoji: 'ü´ñ' },
  
  // Music & Performance
  { name: 'Play Music', emoji: 'üéµ' },
  { name: 'Sing Karaoke', emoji: 'üé§' },
  { name: 'Play Drums', emoji: 'ü•Å' },
  { name: 'Sing Songs', emoji: 'üé∂' },
  { name: 'Dance Battle', emoji: 'üíÉ' },
  { name: 'Make Instruments', emoji: 'üé∏' },
  { name: 'Rhythm Games', emoji: 'üéº' },
  { name: 'Opera Singing', emoji: 'üé≠' },
  { name: 'Beat Boxing', emoji: 'üéµ' },
  { name: 'Air Guitar', emoji: 'üé∏' },
  
  // Outdoor & Nature
  { name: 'Fly Kites', emoji: 'ü™Å' },
  { name: 'Water Plants', emoji: 'üå±' },
  { name: 'Build Sandcastles', emoji: 'üè∞' },
  { name: 'Go Fishing', emoji: 'üé£' },
  { name: 'Feed Birds', emoji: 'üê¶' },
  { name: 'Collect Leaves', emoji: 'üçÉ' },
  { name: 'Go Camping', emoji: 'üèïÔ∏è' },
  { name: 'Nature Walk', emoji: 'üå≥' },
  { name: 'Rock Collecting', emoji: 'ü™®' },
  { name: 'Flower Pressing', emoji: 'üå∏' },
  
  // Games & Puzzles
  { name: 'Play Chess', emoji: '‚ôüÔ∏è' },
  { name: 'Play Cards', emoji: 'üÉè' },
  { name: 'Board Games', emoji: 'üé≤' },
  { name: 'Memory Games', emoji: 'üß†' },
  { name: 'Riddle Time', emoji: 'ü§î' },
  { name: 'Word Games', emoji: 'üìù' },
  { name: 'Number Puzzles', emoji: 'üî¢' },
  { name: 'Brain Teasers', emoji: 'üß©' },
  { name: 'Trivia Quiz', emoji: '‚ùì' },
  { name: 'Charades', emoji: 'üé≠' },
  
  // Cooking & Food
  { name: 'Bake Cookies', emoji: 'üç™' },
  { name: 'Make Smoothies', emoji: 'ü•§' },
  { name: 'Fruit Kabobs', emoji: 'üçì' },
  { name: 'Pizza Making', emoji: 'üçï' },
  { name: 'Cookie Decorating', emoji: 'üßÅ' },
  { name: 'Sandwich Art', emoji: 'ü•™' },
  { name: 'Ice Cream Sundae', emoji: 'üç®' },
  { name: 'Veggie Faces', emoji: 'ü•ï' },
  { name: 'Trail Mix', emoji: 'ü•ú' },
  { name: 'Pancake Art', emoji: 'ü•û' },
  
  // Unique & Quirky
  { name: 'Blow Bubbles', emoji: 'ü´ß' },
  { name: 'Play Catch', emoji: '‚öæ' },
  { name: 'Write Letters', emoji: '‚úâÔ∏è' },
  { name: 'Sock Puppet', emoji: 'üß¶' },
  { name: 'Backwards Day', emoji: 'üîÑ' },
  { name: 'Silly Walks', emoji: 'üö∂' },
  { name: 'Robot Dance', emoji: 'ü§ñ' },
  { name: 'Animal Sounds', emoji: 'üêÑ' },
  { name: 'Tongue Twisters', emoji: 'üëÖ' },
  { name: 'Joke Telling', emoji: 'üòÇ' },
  
  // Additional Activities (91-100)
  { name: 'Make Paper Planes', emoji: '‚úàÔ∏è' },
  { name: 'Hula Hooping', emoji: 'ü§π' },
  { name: 'Face Painting', emoji: 'üé®' },
  { name: 'Meditation', emoji: 'üßò' },
  { name: 'Photography', emoji: 'üì∑' },
  { name: 'Origami Animals', emoji: 'ü¶¢' },
  { name: 'Invisible Rope', emoji: 'ü™¢' },
  { name: 'Mirror Games', emoji: 'ü™û' },
  { name: 'Sound Effects', emoji: 'üîä' },
  { name: 'Time Capsule', emoji: '‚è∞' }
];

// Extract just the activity names for backward compatibility
const FALLBACK_ACTIVITIES = FALLBACK_ACTIVITY_PAIRS.map(pair => pair.name);

/**
 * Get a random fallback activity that doesn't exist in current activities
 */
const getRandomFallbackActivity = (existingActivities: string[]): string => {
  const availableActivities = FALLBACK_ACTIVITIES.filter(
    activity => !existingActivities.includes(activity)
  );
  
  if (availableActivities.length === 0) {
    // If all fallbacks are used, generate a simple numbered option
    let counter = 1;
    let newOption = `Fun Option ${counter}`;
    while (existingActivities.includes(newOption)) {
      counter++;
      newOption = `Fun Option ${counter}`;
    }
    return newOption;
  }
  
  const randomIndex = Math.floor(Math.random() * availableActivities.length);
  return availableActivities[randomIndex];
};

/**
 * Get a random fallback activity with its matching emoji
 */
export const getRandomFallbackActivityPair = (existingActivities: string[]): { name: string; emoji: string } => {
  const availablePairs = FALLBACK_ACTIVITY_PAIRS.filter(
    pair => !existingActivities.includes(pair.name)
  );
  
  if (availablePairs.length === 0) {
    // If all fallbacks are used, generate a simple numbered option
    let counter = 1;
    let newOption = `Fun Option ${counter}`;
    while (existingActivities.includes(newOption)) {
      counter++;
      newOption = `Fun Option ${counter}`;
    }
    return { name: newOption, emoji: getRandomFallbackEmoji() };
  }
  
  const randomIndex = Math.floor(Math.random() * availablePairs.length);
  return availablePairs[randomIndex];
};

/**
 * üÜï SMART FALLBACK SYSTEM - Handles predetermined vs custom wheels intelligently
 * @param existingOptions Array of existing option names on the wheel
 * @param declinedSuggestions Array of previously declined suggestion names
 * @param titleName Current wheel title name
 * @param titleId Current wheel title ID (if from predetermined titles)
 * @returns Smart fallback result
 */
export const getSmartFallbackOption = (
  existingOptions: string[], 
  declinedSuggestions: string[] = [], 
  titleName: string = '',
  titleId?: string
): { name: string; emoji: string; source: 'predetermined' | 'tryagain' } => {
  const exclusionList = [...existingOptions, ...declinedSuggestions];
  
  // Check if this is a predetermined wheel by matching title ID or name
  const predeterminedWheel = PREDETERMINED_TITLES.find(title => 
    (titleId && title.id === titleId) || 
    title.name.toLowerCase() === titleName.toLowerCase()
  );
  
  if (predeterminedWheel) {
    console.log(`üîç Checking predetermined wheel: "${predeterminedWheel.name}"`);
    
    // Find unused options from this specific predetermined wheel
    const availableOptions: { name: string; emoji: string }[] = [];
    predeterminedWheel.items.forEach(item => {
      if (!exclusionList.includes(item.name)) {
        availableOptions.push({
          name: item.name,
          emoji: item.emoji || 'üéØ'
        });
      }
    });
    
    if (availableOptions.length > 0) {
      const randomIndex = Math.floor(Math.random() * availableOptions.length);
      console.log(`‚úÖ Predetermined fallback: Found ${availableOptions.length} unused options from wheel "${predeterminedWheel.name}"`);
      return {
        ...availableOptions[randomIndex],
        source: 'predetermined'
      };
    } else {
      console.log(`üö´ All options exhausted from predetermined wheel "${predeterminedWheel.name}"`);
      return {
        name: 'Try again',
        emoji: 'üîÑ',
        source: 'tryagain'
      };
    }
  }
  
  // For custom wheels, always return "Try again"
  console.log(`üé® Custom wheel detected: "${titleName}" - returning try again`);
  return {
    name: 'Try again',
    emoji: 'üîÑ',
    source: 'tryagain'
  };
};

/**
 * LEGACY - Enhanced fallback system (kept for backward compatibility)
 */
export const getContextualFallbackOption = (
  existingOptions: string[], 
  declinedSuggestions: string[] = [], 
  category?: TitleCategory
): { name: string; emoji: string } => {
  // Use the new smart system but return just the name/emoji for compatibility
  const result = getSmartFallbackOption(existingOptions, declinedSuggestions, '', undefined);
  return { name: result.name, emoji: result.emoji };
};

/**
 * Generate random default activities for first-time app installation
 */
export const generateRandomDefaultActivities = (count: number = 8): Array<{ name: string; emoji: string }> => {
  // Ensure we don't exceed our available unique activities
  const maxAvailable = FALLBACK_ACTIVITY_PAIRS.length; // 100 activities
  const actualCount = Math.min(count, maxAvailable);
  
  // Shuffle the activity pairs array
  const shuffled = [...FALLBACK_ACTIVITY_PAIRS].sort(() => Math.random() - 0.5);
  
  // Take the first 'actualCount' activities (up to 100)
  return shuffled.slice(0, actualCount);
}; 